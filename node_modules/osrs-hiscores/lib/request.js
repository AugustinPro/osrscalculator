"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const error_1 = require("./util/error");
/**
 * Builds the Axios Config with needed properties
 *
 * @param {Config} config The config to use for the request
 *
 * @returns {AxiosRequestConfig}
 */
const buildAxiosConfig = (config) => ({
    headers: {
        'user-agent': config.userAgent
            ? config.userAgent
            : 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1',
        accept: 'text/html',
        'accept-encoding': 'gzip',
    },
    maxRedirects: 0,
    proxy: config.proxy,
    timeout: config.timeout,
    responseType: 'text',
});
/**
 * Fetches a OSRS Hiscore url and returns the contents
 *
 * @param {string} url The url to fetch
 * @param {Config} config The config to use for the request
 *
 * @returns {string} The page content
 *
 * @throws {ServiceUnavailableError} If hiscores are unavailable
 * @throws {NotFoundError} If hiscores did not find player
 * @throws {HttpError} If hiscores request failed unexpectedly
 */
const request = (url, config) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const axiosConfig = buildAxiosConfig(config);
    try {
        const res = yield axios_1.default.get(url, axiosConfig);
        return res.data;
    }
    catch (err) {
        // Handle timeout requests as if hiscores are unavailable
        if (err.code === 'ECONNABORTED' || ((_a = err.response) === null || _a === void 0 ? void 0 : _a.status) === 303) {
            throw new error_1.ServiceUnavailableError('Hiscores are unavailable');
        }
        if (((_b = err.response) === null || _b === void 0 ? void 0 : _b.status) === 404) {
            throw new error_1.NotFoundError('Hiscores did not find player');
        }
        // should never occur
        throw new error_1.HttpError('Hiscores unexpected error');
    }
});
exports.default = request;
