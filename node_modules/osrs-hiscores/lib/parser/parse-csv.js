"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../util/constants");
const csv_content_1 = __importDefault(require("../util/validate/csv-content"));
const error_1 = require("../util/error");
/**
 * Creates Activities from key-value pairs
 *
 * @param {ActivityName[]} keys
 * @param {Activity[]} values
 *
 * @returns {Activities}
 */
const mapActivities = (keys, values) => {
    const activities = {};
    keys.forEach((key, idx) => {
        activities[key] = values[idx];
    });
    return activities;
};
/**
 * Creates Skills from key-value pairs
 *
 * @param {SkillName[]} keys
 * @param {Skill[]} values
 *
 * @returns {Skills}
 */
const mapSkills = (keys, values) => {
    const skills = {};
    keys.forEach((key, idx) => {
        skills[key] = values[idx];
    });
    return skills;
};
/**
 * Converts csv activity data into Activity objects
 *
 * @param {string[][]} activities
 *
 * @returns {Activity[]}
 */
const createActivityArray = (activities) => activities.map(activity => {
    const [rank, score] = activity;
    return {
        rank: Number(rank),
        score: Number(score),
    };
});
/**
 * Converts csv skill data into Skill objects
 *
 * @param {string[][]} skills
 *
 * @returns {Skill[]}
 */
const createSkillArray = (skills) => skills.map(skill => {
    const [rank, level, experience] = skill;
    return {
        rank: Number(rank),
        level: Number(level),
        experience: Number(experience),
    };
});
/**
 * Maps CsvContent to Stats by following the order they appear on OSRS hiscores
 *
 * @param {CsvContent} content The skill content
 *
 * @returns {Stats} The parsed csv formatted as json
 */
const contentToStats = (content) => {
    const skillArr = createSkillArray(content.skills);
    const activityArr = createActivityArray(content.activities);
    const skills = mapSkills(constants_1.SKILLS, skillArr);
    const leaguePoints = activityArr.splice(0, 1)[0]; // don't nest single values (only one LP entry)
    const bountyHunterArr = activityArr.splice(0, constants_1.BOUNTY_HUNTER.length);
    const bountyHunter = mapActivities(constants_1.BOUNTY_HUNTER, bountyHunterArr);
    const clueArr = activityArr.splice(0, constants_1.CLUES.length);
    const clues = mapActivities(constants_1.CLUES, clueArr);
    const lastManStanding = activityArr.splice(0, 1)[0]; // don't nest single values (only one LMS entry)
    const bosses = mapActivities(constants_1.BOSSES, activityArr); // only bosses remaining in the array
    return {
        skills,
        leaguePoints,
        bountyHunter,
        clues,
        lastManStanding,
        bosses,
    };
};
/**
 * Extract skills and activities from a csv
 *
 * @param {string} csv The csv containing stats
 *
 * @returns {CsvContent} Contents of the csv split into arrays
 */
const csvToContent = (csv) => {
    const lines = csv.split('\n');
    const elements = lines.map(stat => stat.split(','));
    const skills = elements.splice(0, constants_1.SKILLS.length);
    const activities = elements.splice(0, constants_1.ACTIVITIES.length);
    return {
        skills,
        activities,
        remaining: elements,
    };
};
/**
 * Parses a csv string to json object
 *
 * @param {string} csv The csv containing player stats
 *
 * @returns {Stats} The parsed csv formatted as json
 *
 * @throws {InvalidCsvError} If the csv had unexpected structure
 */
const parseCsv = (csv) => {
    const content = csvToContent(csv);
    if (!csv_content_1.default(content)) {
        throw new error_1.InvalidCsvError(csv);
    }
    return contentToStats(content);
};
exports.default = parseCsv;
