"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio_1 = __importDefault(require("cheerio"));
const error_1 = require("../util/error");
/**
 * Extracts text from html element
 *
 * @param {CheerioElement} element
 *
 * @returns {string}
 */
const textFromElement = (element) => {
    const innerText = element === null || element === void 0 ? void 0 : element.firstChild.data;
    return innerText ? innerText.replace(/\uFFFd/g, '') : '';
};
/**
 * Extracts number from html element
 *
 * @param {CheerioElement} element
 *
 * @returns {number}
 */
const numberFromElement = (element) => {
    const innerText = element.firstChild.data;
    const number = innerText ? innerText.replace(/,/g, '') : '-1';
    return parseInt(number, 10);
};
/**
 * Parses a hiscore skill table page
 *
 * @param {string} skillPage HTML page of a OSRS hiscore table
 *
 * @returns {PlayerSkillRow[]}
 *
 * @throws {InvalidHtmlError} If html structure is invalid
 */
exports.parseSkillPage = (skillPage, isHardcore = false) => {
    const $ = cheerio_1.default.load(skillPage);
    const hiscoreRows = $('.personal-hiscores__row').toArray();
    const players = hiscoreRows.map(row => {
        const cells = row.children.filter(element => element.name === 'td');
        const [rankElement, nameCell, levelElement, experienceElement] = cells;
        const nameElement = nameCell.children.find(element => element.name === 'a');
        const stats = {
            name: textFromElement(nameElement),
            rank: numberFromElement(rankElement),
            level: numberFromElement(levelElement),
            experience: numberFromElement(experienceElement),
        };
        // we only care about death status if it is a hardcore table
        if (isHardcore) {
            const isDead = !!nameCell.children.find(element => element.name === 'img');
            return Object.assign(Object.assign({}, stats), { dead: isDead });
        }
        return stats;
    });
    return players;
};
/**
 * Parses a hiscore activity table page
 *
 * @param {string} activityPage HTML page of a OSRS hiscore table
 *
 * @returns {PlayerActivityRow[]}
 *
 * @throws {InvalidHtmlError} If html structure is invalid
 */
exports.parseActivityPage = (activityPage, isHardcore = false) => {
    const $ = cheerio_1.default.load(activityPage);
    const hiscoreRows = $('.personal-hiscores__row').toArray();
    const players = hiscoreRows.map(row => {
        const cells = row.children.filter(element => element.name === 'td');
        const [rankElement, nameCell, scoreElement] = cells;
        const nameElement = nameCell.children.find(element => element.name === 'a');
        const stats = {
            name: textFromElement(nameElement),
            rank: numberFromElement(rankElement),
            score: numberFromElement(scoreElement),
        };
        // we only care about death status if it is a hardcore table
        if (isHardcore) {
            const isDead = !!nameCell.children.find(element => element.name === 'img');
            return Object.assign(Object.assign({}, stats), { dead: isDead });
        }
        return stats;
    });
    return players;
};
/**
 * Parses a display name page to find the highlighted display name
 *
 * @param displayNamePage HTML page of a OSRS hiscore table
 *
 * @returns {string} The display name
 *
 * @throws {InvalidHtmlError} If display name is not found
 */
exports.parseDisplayNamePage = (displayNamePage) => {
    var _a, _b;
    const $ = cheerio_1.default.load(displayNamePage);
    const displayName = (_b = (_a = $('[style="color:#AA0022;"]')[1]) === null || _a === void 0 ? void 0 : _a.children[0]) === null || _b === void 0 ? void 0 : _b.data;
    if (displayName && displayName.length > 0) {
        return displayName.replace(/\uFFFd/g, '');
    }
    throw new error_1.InvalidHtmlError('Could not find display name', displayNamePage);
};
