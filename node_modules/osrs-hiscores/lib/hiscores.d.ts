import { Config, Stats, Mode, SkillName, PlayerSkillRow, PlayerActivityRow, ActivityName, DisplayName, PlayerMode } from './types';
declare class Hiscores {
    readonly config: Config;
    constructor(config?: Config);
    /**
     * Fetches the stats for the given player and (optional) mode.
     *
     * @param {string} player The player name to lookup
     * @param {Mode} [mode] The game mode to lookup. Defaults to `normal`
     *
     * @returns {Stats} Player stats formatted as json
     *
     * @throws {InvalidPlayerError} If player name is invalid
     * @throws {ServiceUnavailableError} If hiscores are unavailable
     * @throws {NotFoundError} If hiscores did not find player
     * @throws {HttpError} If hiscores request failed unexpectedly
     * @throws {InvalidCsvError} If the csv had unexpected structure
     */
    getStats(player: string, mode?: Mode): Promise<Stats>;
    /**
     * Finds the players display name (formatted name)
     *
     * @param {string} player The player name to lookup
     * @param {Mode} [mode] The game mode to lookup. Defaults to `normal`
     *
     * @returns {DisplayName} The formatted display name if found, else unformatted
     *
     * @throws {InvalidPlayerError} If player name is invalid
     * @throws {ServiceUnavailableError} If hiscores are unavailable
     * @throws {NotFoundError} If hiscores did not find player
     * @throws {HttpError} If hiscores request failed unexpectedly
     * @throws {InvalidHtmlError} If the html had unexpected structure
     */
    getDisplayName(player: string, mode?: Mode): Promise<DisplayName>;
    /**
     * Fetches a hiscores table page as json
     *
     * @param {SkillName} skill The skill name to get table for
     * @param {Mode} [mode] The game mode to lookup. Defaults to `normal`
     * @param {number} [page] The page number to lookup. Defaults to `0`
     *
     * @returns {PlayerSkillRow[]} Skill table page formatted as json
     *
     * @throws {ServiceUnavailableError} If hiscores are unavailable
     * @throws {HttpError} If hiscores request failed unexpectedly
     * @throws {InvalidHtmlError} If the html had unexpected structure
     */
    getSkillPage(skill: SkillName, mode?: Mode, page?: number): Promise<PlayerSkillRow[]>;
    /**
     * Fetches a hiscores activity table page by activity name
     *
     * @param {Activity} activity The activity name to get table for
     * @param {Mode} [mode] The game mode to lookup. Defaults to `normal`
     * @param {number} [page] The page number to lookup. Defaults to `0`
     *
     * @returns {PlayerActivityRow[]} Activity table page formatted as json
     *
     * @throws {ServiceUnavailableError} If hiscores are unavailable
     * @throws {HttpError} If hiscores request failed unexpectedly
     * @throws {InvalidHtmlError} If the html had unexpected structure
     */
    getActivityPage(activity: ActivityName, mode?: Mode, page?: number): Promise<PlayerActivityRow[]>;
    /**
     * Get the mode of an account.
     *
     * To determine the mode we lookup the players stats for all possible modes. Checks are then
     * perfomed based on the stats to see the state of the player.
     *
     * Normal is the base-case. All snowflake modes will have these stats (due to the hiscores being unreliable
     * lately this may not always be the case. Using `>=` instead of `===` to solve the issue).
     *
     * Ironmen are then separed into categories:
     *   - Ironman (same stats as normal, else de-ironed)
     *   - Hardcore (same stats as ironman, else dead)
     *   - Ultimate (same stats as ironman, else de-ulted)
     *
     * @param {string} Player The player name
     *
     * @returns {PlayerMode} The player mode
     *
     * @throws {InvalidPlayerError} If player name is invalid
     * @throws {ServiceUnavailableError} If hiscores are unavailable
     * @throws {NotFoundError} If hiscores did not find player
     * @throws {HttpError} If hiscores request failed unexpectedly
     * @throws {InvalidCsvError} If the csv had unexpected structure
     */
    getMode(player: string): Promise<PlayerMode>;
    private hasStats;
}
export default Hiscores;
