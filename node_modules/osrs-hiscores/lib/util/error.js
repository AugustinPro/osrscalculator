"use strict";
/* eslint-disable max-classes-per-file */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A Error with data details. `data` will containing the data
 * that made the error occur.
 */
class DataError extends Error {
    constructor(msg, data) {
        super(msg);
        this.data = data;
    }
}
/**
 * Error used when a csv has unexpected structure, e.g: One entry too many / too little.
 * The raw csv can be found in the `data` property.
 */
class InvalidCsvError extends DataError {
    constructor(csv) {
        super('Invalid csv structure', csv);
    }
}
exports.InvalidCsvError = InvalidCsvError;
/**
 * Error used when a html page has unexpected structure, e.g: Could not parse element.
 * The raw html can be found in the `data` property.
 */
class InvalidHtmlError extends DataError {
}
exports.InvalidHtmlError = InvalidHtmlError;
/**
 * Validation error for player name
 */
class InvalidPlayerError extends Error {
    constructor(player) {
        super(`Invalid player name: ${player}`);
    }
}
exports.InvalidPlayerError = InvalidPlayerError;
/**
 * A generic HTTP error, default status 500.
 * Used to map HTTP status codes to errors.
 */
class HttpError extends Error {
    constructor(msg, status = 500) {
        super(msg);
        this.status = status;
    }
}
exports.HttpError = HttpError;
class NotFoundError extends HttpError {
    constructor(msg) {
        super(msg, 404);
    }
}
exports.NotFoundError = NotFoundError;
class ServiceUnavailableError extends HttpError {
    constructor(msg) {
        super(msg, 503);
    }
}
exports.ServiceUnavailableError = ServiceUnavailableError;
