/**
 * A Error with data details. `data` will containing the data
 * that made the error occur.
 */
declare class DataError extends Error {
    data: string;
    constructor(msg: string, data: string);
}
/**
 * Error used when a csv has unexpected structure, e.g: One entry too many / too little.
 * The raw csv can be found in the `data` property.
 */
export declare class InvalidCsvError extends DataError {
    constructor(csv: string);
}
/**
 * Error used when a html page has unexpected structure, e.g: Could not parse element.
 * The raw html can be found in the `data` property.
 */
export declare class InvalidHtmlError extends DataError {
}
/**
 * Validation error for player name
 */
export declare class InvalidPlayerError extends Error {
    constructor(player: string);
}
/**
 * A generic HTTP error, default status 500.
 * Used to map HTTP status codes to errors.
 */
export declare class HttpError extends Error {
    status: number;
    constructor(msg: string, status?: number);
}
export declare class NotFoundError extends HttpError {
    constructor(msg: string);
}
export declare class ServiceUnavailableError extends HttpError {
    constructor(msg: string);
}
export {};
